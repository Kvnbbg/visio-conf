# Docker Compose for Visio-Conf v3.0 Production
# Complete stack with application, database, cache, and monitoring

version: '3.8'

services:
  # Main application service
  visio-conf:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
    container_name: visio-conf-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://visioconf:${POSTGRES_PASSWORD}@postgres:5432/visioconf
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=${SESSION_SECRET}
      - ZEGOCLOUD_APP_ID=${ZEGOCLOUD_APP_ID}
      - ZEGOCLOUD_SERVER_SECRET=${ZEGOCLOUD_SERVER_SECRET}
      - FRANCETRAVAIL_CLIENT_ID=${FRANCETRAVAIL_CLIENT_ID}
      - FRANCETRAVAIL_CLIENT_SECRET=${FRANCETRAVAIL_CLIENT_SECRET}
      - FRANCETRAVAIL_REDIRECT_URI=${FRANCETRAVAIL_REDIRECT_URI}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - visio-network
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: visio-conf-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=visioconf
      - POSTGRES_USER=visioconf
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - visio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visioconf -d visioconf"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Redis cache and session store
  redis:
    image: redis:7-alpine
    container_name: visio-conf-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - visio-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: visio-conf-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - visio-conf
    networks:
      - visio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: visio-conf-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - visio-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: visio-conf-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - visio-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: visio-conf-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - visio-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

networks:
  visio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  app-logs:
    driver: local
  app-uploads:
    driver: local
  nginx-logs:
    driver: local

